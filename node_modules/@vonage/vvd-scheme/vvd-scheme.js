import { applySchemeCSS } from './vvd-scheme-style-tag-handler.js';
import { pcs, getPreferedColorScheme, } from './os-sync.utils.js';
import { PredefinedScheme, AutoScheme, } from './vvd-scheme-foundation.js';
import { Emitter } from '@vonage/vvd-foundation/general-utils.js';
export { PredefinedScheme, AutoScheme, } from './vvd-scheme-foundation.js';
const eventBus = new Emitter();
let _selectedScheme;
function getSelectedScheme() {
    return _selectedScheme;
}
let _selectedSchemeOption;
function getSelectedSchemeOption() {
    return _selectedSchemeOption;
}
function getDefaultSchemeOption() {
    return PredefinedScheme.LIGHT;
}
function getEffectiveSchemeOption(destOption = null) {
    return destOption || _selectedSchemeOption || getDefaultSchemeOption();
}
async function syncWithOSSettings() {
    applySchemeCSS(getPreferedColorScheme());
}
function setSyncModeIfRelevant(scheme) {
    let result;
    if (scheme === AutoScheme.SYNC_WITH_OS_SETTINGS) {
        pcs.addEventListener('change', syncWithOSSettings);
        result = getPreferedColorScheme();
    }
    else {
        pcs.removeEventListener('change', syncWithOSSettings);
        result = scheme;
    }
    return result;
}
let setPromise = null;
async function set(schemeOption = null) {
    const effectiveOption = getEffectiveSchemeOption(schemeOption);
    if (effectiveOption === _selectedSchemeOption && setPromise) {
        return setPromise;
    }
    _selectedSchemeOption = effectiveOption;
    let tmpPromise;
    const effectiveNewScheme = setSyncModeIfRelevant(_selectedSchemeOption);
    if (effectiveNewScheme !== _selectedScheme) {
        _selectedScheme = effectiveNewScheme;
        tmpPromise = applySchemeCSS(_selectedScheme);
    }
    else {
        tmpPromise = Promise.resolve();
    }
    setPromise = tmpPromise.then(() => {
        notifySelected(_selectedScheme);
        return {
            option: _selectedSchemeOption,
            scheme: _selectedScheme,
        };
    });
    return setPromise;
}
function notifySelected(scheme) {
    const ev = new CustomEvent('vvd-scheme-select', {
        detail: { scheme },
    });
    eventBus.dispatchEvent(ev);
}
export default Object.freeze({
    set,
    eventBus,
    getSelectedScheme,
    getSelectedSchemeOption,
});
//# sourceMappingURL=vvd-scheme.js.map