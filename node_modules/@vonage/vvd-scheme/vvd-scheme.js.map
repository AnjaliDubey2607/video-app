{"version":3,"file":"vvd-scheme.js","sourceRoot":"","sources":["src/vvd-scheme.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAE,MAAM,mCAAmC,CAAC;AACnE,OAAO,EACN,GAAG,EACH,sBAAsB,GAEtB,MAAM,oBAAoB,CAAC;AAC5B,OAAO,EACN,gBAAgB,EAChB,UAAU,GACV,MAAM,4BAA4B,CAAC;AAMpC,OAAO,EAAE,OAAO,EAAE,MAAM,yCAAyC,CAAC;AAElE,OAAO,EACN,gBAAgB,EAChB,UAAU,GACV,MAAM,4BAA4B,CAAC;AAOpC,MAAM,QAAQ,GAAG,IAAI,OAAO,EAAE,CAAC;AAE/B,IAAI,eAAiC,CAAC;AACtC,SAAS,iBAAiB;IACzB,OAAO,eAAe,CAAC;AACxB,CAAC;AAED,IAAI,qBAAmC,CAAC;AACxC,SAAS,uBAAuB;IAC/B,OAAO,qBAAqB,CAAC;AAC9B,CAAC;AAED,SAAS,sBAAsB;IAM9B,OAAO,gBAAgB,CAAC,KAAK,CAAC;AAC/B,CAAC;AAED,SAAS,wBAAwB,CAChC,aAAkC,IAAI;IAEtC,OAAO,UAAU,IAAI,qBAAqB,IAAI,sBAAsB,EAAE,CAAC;AACxE,CAAC;AAED,KAAK,UAAU,kBAAkB;IAChC,cAAc,CAAC,sBAAsB,EAAsB,CAAC,CAAC;AAC9D,CAAC;AAED,SAAS,qBAAqB,CAAC,MAAoB;IAClD,IAAI,MAAoB,CAAC;IACzB,IAAI,MAAM,KAAK,UAAU,CAAC,qBAAqB,EAAE;QAChD,GAAG,CAAC,gBAAgB,CAAC,QAAQ,EAAE,kBAAkB,CAAC,CAAC;QACnD,MAAM,GAAG,sBAAsB,EAAsB,CAAC;KACtD;SAAM;QACN,GAAG,CAAC,mBAAmB,CAAC,QAAQ,EAAE,kBAAkB,CAAC,CAAC;QACtD,MAAM,GAAG,MAAM,CAAC;KAChB;IACD,OAAO,MAAM,CAAC;AACf,CAAC;AAED,IAAI,UAAU,GAA4C,IAAI,CAAC;AAE/D,KAAK,UAAU,GAAG,CACjB,eAAoC,IAAI;IAIxC,MAAM,eAAe,GAAG,wBAAwB,CAAC,YAAY,CAAC,CAAC;IAG/D,IAAI,eAAe,KAAK,qBAAqB,IAAI,UAAU,EAAE;QAE5D,OAAO,UAAU,CAAC;KAClB;IAED,qBAAqB,GAAG,eAAe,CAAC;IAExC,IAAI,UAAU,CAAC;IACf,MAAM,kBAAkB,GAAqB,qBAAqB,CACjE,qBAAqB,CACrB,CAAC;IACF,IAAI,kBAAkB,KAAK,eAAe,EAAE;QAC3C,eAAe,GAAG,kBAAkB,CAAC;QACrC,UAAU,GAAG,cAAc,CAAC,eAAe,CAAC,CAAC;KAC7C;SAAM;QACN,UAAU,GAAG,OAAO,CAAC,OAAO,EAAE,CAAC;KAC/B;IAED,UAAU,GAAG,UAAU,CAAC,IAAI,CAAC,GAAG,EAAE;QAEjC,cAAc,CAAC,eAAe,CAAC,CAAC;QAEhC,OAAO;YACN,MAAM,EAAE,qBAAqB;YAC7B,MAAM,EAAE,eAAe;SACvB,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,OAAO,UAAU,CAAC;AACnB,CAAC;AAED,SAAS,cAAc,CAAC,MAAoB;IAC3C,MAAM,EAAE,GAAG,IAAI,WAAW,CAAiB,mBAAmB,EAAE;QAC/D,MAAM,EAAE,EAAE,MAAM,EAAE;KAClB,CAAC,CAAC;IACH,QAAQ,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC;AAC5B,CAAC;AAKD,eAAe,MAAM,CAAC,MAAM,CAAC;IAC5B,GAAG;IACH,QAAQ;IACR,iBAAiB;IACjB,uBAAuB;CACvB,CAAC,CAAC","sourcesContent":["import { applySchemeCSS } from './vvd-scheme-style-tag-handler.js';\nimport {\n\tpcs,\n\tgetPreferedColorScheme,\n\t// prefersColorSchemeSupported,\n} from './os-sync.utils.js';\nimport {\n\tPredefinedScheme,\n\tAutoScheme,\n} from './vvd-scheme-foundation.js';\n\nimport type {\n\tSchemeOption,\n\tSelectedDetail\n} from './vvd-scheme-foundation.js';\nimport { Emitter } from '@vonage/vvd-foundation/general-utils.js';\n\nexport {\n\tPredefinedScheme,\n\tAutoScheme,\n} from './vvd-scheme-foundation.js';\n\nexport type {\n\tSchemeOption,\n\tSelectedDetail\n};\n\nconst eventBus = new Emitter(); // !refactored due to lack of support of EventTarget as a constructor (new EventTarget()) in safari 12\n\nlet _selectedScheme: PredefinedScheme;\nfunction getSelectedScheme(): PredefinedScheme {\n\treturn _selectedScheme;\n}\n\nlet _selectedSchemeOption: SchemeOption;\nfunction getSelectedSchemeOption(): SchemeOption {\n\treturn _selectedSchemeOption;\n}\n\nfunction getDefaultSchemeOption(): SchemeOption {\n\t// if no scheme chosen try 'prefers-color-scheme' and if not supported just return 'light'\n\t// return prefersColorSchemeSupported() ? 'syncWithOSSettings' : 'light';\n\t// ! commented the cahnce of serving dark mode components as:\n\t// ! 1. vivid packages aren't really supported by dark mode yet\n\t// ! 2. we still have no control over application scheme mode context\n\treturn PredefinedScheme.LIGHT;\n}\n\nfunction getEffectiveSchemeOption(\n\tdestOption: SchemeOption | null = null\n): SchemeOption {\n\treturn destOption || _selectedSchemeOption || getDefaultSchemeOption();\n}\n\nasync function syncWithOSSettings() {\n\tapplySchemeCSS(getPreferedColorScheme() as PredefinedScheme);\n}\n\nfunction setSyncModeIfRelevant(scheme: SchemeOption): PredefinedScheme {\n\tlet result: SchemeOption;\n\tif (scheme === AutoScheme.SYNC_WITH_OS_SETTINGS) {\n\t\tpcs.addEventListener('change', syncWithOSSettings);\n\t\tresult = getPreferedColorScheme() as PredefinedScheme;\n\t} else {\n\t\tpcs.removeEventListener('change', syncWithOSSettings);\n\t\tresult = scheme;\n\t}\n\treturn result;\n}\n\nlet setPromise: Promise<Record<string, unknown>> | null = null;\n\nasync function set(\n\tschemeOption: SchemeOption | null = null\n): Promise<Record<string, unknown>> {\n\t// console.info(`Vivid scheme requested to change to '${schemeOption}'...`);\n\n\tconst effectiveOption = getEffectiveSchemeOption(schemeOption);\n\t// console.info(`... which resolved effectively to '${effectiveOption}'...`);\n\n\tif (effectiveOption === _selectedSchemeOption && setPromise) {\n\t\t// console.info('... new scheme option is equal to current, done');\n\t\treturn setPromise;\n\t}\n\n\t_selectedSchemeOption = effectiveOption;\n\n\tlet tmpPromise;\n\tconst effectiveNewScheme: PredefinedScheme = setSyncModeIfRelevant(\n\t\t_selectedSchemeOption\n\t);\n\tif (effectiveNewScheme !== _selectedScheme) {\n\t\t_selectedScheme = effectiveNewScheme;\n\t\ttmpPromise = applySchemeCSS(_selectedScheme);\n\t} else {\n\t\ttmpPromise = Promise.resolve();\n\t}\n\n\tsetPromise = tmpPromise.then(() => {\n\t\t// console.info('... scheme changed');\n\t\tnotifySelected(_selectedScheme);\n\n\t\treturn {\n\t\t\toption: _selectedSchemeOption,\n\t\t\tscheme: _selectedScheme,\n\t\t};\n\t});\n\n\treturn setPromise;\n}\n\nfunction notifySelected(scheme: SchemeOption) {\n\tconst ev = new CustomEvent<SelectedDetail>('vvd-scheme-select', {\n\t\tdetail: { scheme },\n\t});\n\teventBus.dispatchEvent(ev);\n}\n\n/**\n * @fires selected {SelectedDetail}\n */\nexport default Object.freeze({\n\tset,\n\teventBus,\n\tgetSelectedScheme,\n\tgetSelectedSchemeOption,\n});\n\n//TODO add the following tests:\n//!scheme change event\n//!add / remove Listener when toggling 'syncWithOSSettings' selected option\n"]}