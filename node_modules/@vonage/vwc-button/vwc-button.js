var _VWCButton__hiddenButton;
var VWCButton_1;
import { __classPrivateFieldGet, __decorate } from "tslib";
import '@vonage/vvd-core';
import '@vonage/vwc-icon';
import { customElement, property, html } from 'lit-element';
import { classMap } from 'lit-html/directives/class-map.js';
import { Button as MWCButton } from '@material/mwc-button';
import { style as vwcButtonStyle } from './vwc-button.css.js';
import { styles as mwcButtonStyles } from '@material/mwc-button/styles.css.js';
import { style as styleCoupling } from '@vonage/vvd-style-coupling/mdc-vvd-coupling.css.js';
MWCButton.styles = [styleCoupling, mwcButtonStyles, vwcButtonStyle];
const types = ['submit', 'reset', 'button'];
let VWCButton = VWCButton_1 = class VWCButton extends MWCButton {
    constructor() {
        super(...arguments);
        this.dense = false;
        this.enlarged = false;
        this.type = 'submit';
        this.formId = null;
        this.stacked = false;
        _VWCButton__hiddenButton.set(this, VWCButton_1.createHiddenButton());
    }
    updateFormAndButton() {
        var _a;
        const formId = this.getAttribute('form');
        if (formId !== null) {
            (_a = __classPrivateFieldGet(this, _VWCButton__hiddenButton, "f")) === null || _a === void 0 ? void 0 : _a.setAttribute('form', formId);
        }
    }
    attributeChangedCallback(name, oldval, newval) {
        var _a;
        if (name === 'form' && newval && newval !== oldval) {
            (_a = __classPrivateFieldGet(this, _VWCButton__hiddenButton, "f")) === null || _a === void 0 ? void 0 : _a.setAttribute('form', newval);
        }
        else {
            super.attributeChangedCallback(name, oldval, newval);
        }
    }
    update(changes) {
        super.update(changes);
        [...changes.keys()]
            .filter(attributeName => ['name', 'value'].includes(attributeName))
            .forEach((attributeName) => {
            __classPrivateFieldGet(this, _VWCButton__hiddenButton, "f").setAttribute(attributeName, this[attributeName]);
        });
    }
    updated(changes) {
        var _a, _b;
        if (changes.has('type')) {
            (_a = __classPrivateFieldGet(this, _VWCButton__hiddenButton, "f")) === null || _a === void 0 ? void 0 : _a.setAttribute('type', (_b = this.getAttribute('type')) !== null && _b !== void 0 ? _b : '');
        }
        this.toggleAttribute('outlined', this.layout === 'outlined');
        this.toggleAttribute('unelevated', this.layout === 'filled');
        if (changes.has('dense')) {
            if (this.dense && this.enlarged) {
                this.enlarged = false;
            }
        }
        if (changes.has('enlarged')) {
            if (this.enlarged && this.dense) {
                this.removeAttribute('dense');
                this.dense = false;
            }
        }
    }
    get form() {
        return __classPrivateFieldGet(this, _VWCButton__hiddenButton, "f").form;
    }
    set form(_) {
    }
    _handleClick(event) {
        if (this.form) {
            switch (this.getAttribute('type')) {
                case 'reset':
                    this.form.reset();
                    break;
                case 'button':
                    break;
                default:
                    if (event.target === this) {
                        __classPrivateFieldGet(this, _VWCButton__hiddenButton, "f").click();
                    }
                    else {
                        event.stopImmediatePropagation();
                    }
                    break;
            }
        }
    }
    renderIcon() {
        return html `<vwc-icon	type="${this.icon}"></vwc-icon>`;
    }
    getRenderClasses() {
        return classMap({
            'mdc-button--raised': this.raised,
            'mdc-button--unelevated': this.unelevated,
            'mdc-button--outlined': this.outlined,
            'mdc-button--dense': this.dense,
            [`connotation-${this.connotation}`]: !!this.connotation,
            [`layout-${this.layout}`]: !!this.layout,
            'button-stacked': this.stacked,
        });
    }
    static createHiddenButton() {
        const button = document.createElement('button');
        button.style.display = 'none';
        return button;
    }
    connectedCallback() {
        super.connectedCallback();
        this.addEventListener('click', this._handleClick);
        this.appendChild(__classPrivateFieldGet(this, _VWCButton__hiddenButton, "f"));
    }
    disconnectedCallback() {
        super.disconnectedCallback();
        this.removeEventListener('click', this._handleClick);
    }
};
_VWCButton__hiddenButton = new WeakMap();
__decorate([
    property({ type: String, reflect: true })
], VWCButton.prototype, "name", void 0);
__decorate([
    property({ type: String, reflect: true })
], VWCButton.prototype, "value", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], VWCButton.prototype, "dense", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], VWCButton.prototype, "enlarged", void 0);
__decorate([
    property({ type: String, reflect: true })
], VWCButton.prototype, "layout", void 0);
__decorate([
    property({ type: String, reflect: true })
], VWCButton.prototype, "connotation", void 0);
__decorate([
    property({ type: String, reflect: true })
], VWCButton.prototype, "shape", void 0);
__decorate([
    property({ type: String, reflect: true })
], VWCButton.prototype, "type", void 0);
__decorate([
    property({ attribute: 'form', reflect: true })
], VWCButton.prototype, "formId", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], VWCButton.prototype, "stacked", void 0);
VWCButton = VWCButton_1 = __decorate([
    customElement('vwc-button')
], VWCButton);
export { VWCButton };
//# sourceMappingURL=vwc-button.js.map