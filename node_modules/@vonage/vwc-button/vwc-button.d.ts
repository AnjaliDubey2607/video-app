import '@vonage/vvd-core';
import '@vonage/vwc-icon';
import { TemplateResult } from 'lit-element';
import { Button as MWCButton } from '@material/mwc-button';
import type { Connotation, Layout, Shape } from '@vonage/vvd-foundation/constants.js';
import type { PropertyValues } from 'lit-element';
declare global {
    interface HTMLElementTagNameMap {
        'vwc-button': VWCButton;
    }
}
export declare type ButtonLayout = Extract<Layout, Layout.Filled | Layout.Outlined | Layout.Ghost>;
declare const types: string[];
export declare type ButtonType = typeof types;
declare type ButtonConnotation = Extract<Connotation, Connotation.Primary | Connotation.CTA | Connotation.Success | Connotation.Alert | Connotation.Info | Connotation.Announcement>;
declare type ButtonShape = Extract<Shape, Shape.Rounded | Shape.Pill>;
export declare class VWCButton extends MWCButton {
    #private;
    name?: string;
    value?: string;
    dense: boolean;
    enlarged: boolean;
    layout?: ButtonLayout;
    connotation?: ButtonConnotation;
    shape?: ButtonShape;
    type: ButtonType[number];
    formId: string | null;
    stacked: boolean;
    protected updateFormAndButton(): void;
    attributeChangedCallback(name: string, oldval: string | null, newval: string | null): void;
    protected update(changes: PropertyValues): void;
    protected updated(changes: Map<string, boolean>): void;
    get form(): HTMLFormElement | null;
    set form(_: HTMLFormElement | null);
    protected _handleClick(event: MouseEvent): void;
    protected renderIcon(): TemplateResult;
    protected getRenderClasses(): (part: import("lit-html").Part) => void;
    static createHiddenButton(): HTMLButtonElement;
    connectedCallback(): void;
    disconnectedCallback(): void;
}
export {};
