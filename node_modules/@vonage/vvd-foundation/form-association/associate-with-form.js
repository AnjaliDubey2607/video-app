import { getFormByIdOrClosest, } from './common.js';
const types = ['checkbox', 'textarea', 'input'];
class FormAssociationDisconnectionComponent extends HTMLElement {
    disconnectedCallback() {
        this.dispatchEvent(new Event('disconnected'));
    }
}
window.customElements.define('form-association-disconnection', FormAssociationDisconnectionComponent);
function setHiddenInputInitialValuesAndStyle(hiddenInput, { name, type, value: initialValue }) {
    hiddenInput.style.display = 'none';
    if (name) {
        hiddenInput.setAttribute('name', name);
    }
    if (type) {
        hiddenInput.setAttribute('type', type);
    }
    hiddenInput.defaultValue = initialValue;
}
function appendHiddenInputToHostingForm(hostingForm, hiddenType) {
    const hiddenInput = document.createElement(hiddenType);
    hostingForm.appendChild(hiddenInput);
    return hiddenInput;
}
function setInternalValueAndValidityInHiddenInput(inputField, value, validationMessage = '') {
    if (!inputField) {
        return;
    }
    inputField.value = value;
    inputField.setCustomValidity(validationMessage);
}
function resetFormFactory(inputElement, internalFormElement, hiddenInput) {
    return () => {
        var _a;
        inputElement.value = internalFormElement.value =
            (_a = hiddenInput === null || hiddenInput === void 0 ? void 0 : hiddenInput.defaultValue) !== null && _a !== void 0 ? _a : '';
        setInternalValueAndValidityInHiddenInput(hiddenInput, inputElement.value, internalFormElement.validationMessage);
    };
}
function suspendInvalidEvent(inputElement) {
    inputElement.addEventListener('invalid', (event) => {
        event.stopPropagation();
        event.preventDefault();
    });
}
function syncValueAndValidityOnChanges(inputElement, internalFormElement, hiddenInput) {
    const eventNames = ['input', 'change'];
    eventNames.forEach((eventName) => {
        inputElement.addEventListener(eventName, () => {
            setInternalValueAndValidityInHiddenInput(hiddenInput, inputElement.value, internalFormElement.validationMessage);
        });
    });
}
function appendDisconnectionCleanupElement(inputElement, disconnectionCallback) {
    const removeListenerElement = document.createElement('form-association-disconnection');
    removeListenerElement.addEventListener('disconnected', () => {
        disconnectionCallback();
    });
    inputElement.appendChild(removeListenerElement);
}
function associateFormCleanupFactory(hiddenInput, hostingForm, resetFormHandler) {
    return () => {
        hiddenInput.remove();
        hostingForm.removeEventListener('reset', resetFormHandler);
    };
}
export function associateWithForm(customInputElement, internalFormElement) {
    const hostingForm = getFormByIdOrClosest(customInputElement);
    if (!hostingForm) {
        return;
    }
    const hiddenInput = appendHiddenInputToHostingForm(hostingForm, internalFormElement.nodeName);
    setHiddenInputInitialValuesAndStyle(hiddenInput, customInputElement);
    suspendInvalidEvent(hiddenInput);
    const resetFormHandler = resetFormFactory(customInputElement, internalFormElement, hiddenInput);
    const disconnectionCallback = associateFormCleanupFactory(hiddenInput, hostingForm, resetFormHandler);
    setInternalValueAndValidityInHiddenInput(hiddenInput, customInputElement.value, internalFormElement.validationMessage);
    hostingForm.addEventListener('reset', resetFormHandler);
    appendDisconnectionCleanupElement(customInputElement, disconnectionCallback);
    syncValueAndValidityOnChanges(customInputElement, internalFormElement, hiddenInput);
}
//# sourceMappingURL=associate-with-form.js.map