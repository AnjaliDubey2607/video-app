export * from './utils/emitter.js';
export function handleAutofocus(targetElement) {
    if (!targetElement || !targetElement.hasAttribute) {
        console.error(`HTMLElement target expected, got '${targetElement}'`);
        return;
    }
    if (targetElement.hasAttribute('autofocus') &&
        !document.body.matches(':focus-within')) {
        targetElement.focus();
    }
}
export function handleMultipleDenseProps(targetElement, changes) {
    if (changes.has('dense')) {
        if (targetElement.dense && targetElement.enlarged) {
            targetElement.enlarged = false;
        }
    }
    if (changes.has('enlarged')) {
        if (targetElement.enlarged && targetElement.dense) {
            targetElement.removeAttribute('dense');
            targetElement.dense = false;
        }
    }
}
export function assert(condition, msg) {
    if (!condition) {
        throw new Error(msg);
    }
}
export function debounced(waitInMS = 50) {
    let timeoutId;
    return function (target, propertyKey) {
        const result = function (...args) {
            globalThis.clearTimeout(timeoutId);
            timeoutId = globalThis.setTimeout(() => target[propertyKey](...args), waitInMS);
        };
        return result;
    };
}
//# sourceMappingURL=general-utils.js.map