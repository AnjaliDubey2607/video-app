import { _ as __decorate, a as attr, b as __metadata, U as __classPrivateFieldGet, h as html, r as registerFactory } from './index.js';
import { P as Popup, p as popupRegistries } from './definition18.js';
import { c as classNames } from './class-names.js';

var css_248z = "/**\n * Do not edit directly\n * Generated on Sun, 19 Feb 2023 11:52:38 GMT\n */\n.control {\n  pointer-events: none;\n}\n\n.tooltip {\n  width: var(--tooltip-inline-size, 240px);\n}\n.tooltip-text {\n  padding: 8px 12px;\n  color: var(--vvd-color-canvas-text);\n  font: var(--vvd-typography-base-bold);\n}";

var _Tooltip_instances, _Tooltip_anchorUpdated, _Tooltip_addEventListener, _Tooltip_removeEventListener, _Tooltip_show, _Tooltip_hide;
class Tooltip extends Popup {
  constructor() {
    super(...arguments);
    _Tooltip_instances.add(this);
    _Tooltip_show.set(this, () => {
      this.open = true;
    });
    _Tooltip_hide.set(this, () => {
      this.open = false;
    });
  }
  connectedCallback() {
    super.connectedCallback();
    __classPrivateFieldGet(this, _Tooltip_instances, "m", _Tooltip_anchorUpdated).call(this);
  }
  disconnectedCallback() {
    super.disconnectedCallback();
    __classPrivateFieldGet(this, _Tooltip_instances, "m", _Tooltip_removeEventListener).call(this);
  }
  attributeChangedCallback(name, oldValue, newValue) {
    super.attributeChangedCallback(name, oldValue, newValue);
    __classPrivateFieldGet(this, _Tooltip_instances, "m", _Tooltip_anchorUpdated).call(this);
  }
}
_Tooltip_show = new WeakMap(), _Tooltip_hide = new WeakMap(), _Tooltip_instances = new WeakSet(), _Tooltip_anchorUpdated = function _Tooltip_anchorUpdated() {
  __classPrivateFieldGet(this, _Tooltip_instances, "m", _Tooltip_removeEventListener).call(this);
  __classPrivateFieldGet(this, _Tooltip_instances, "m", _Tooltip_addEventListener).call(this);
}, _Tooltip_addEventListener = function _Tooltip_addEventListener() {
  var _a, _b, _c, _d;
  (_a = this.anchorEl) === null || _a === void 0 ? void 0 : _a.addEventListener('mouseover', __classPrivateFieldGet(this, _Tooltip_show, "f"));
  (_b = this.anchorEl) === null || _b === void 0 ? void 0 : _b.addEventListener('mouseout', __classPrivateFieldGet(this, _Tooltip_hide, "f"));
  (_c = this.anchorEl) === null || _c === void 0 ? void 0 : _c.addEventListener('focusin', __classPrivateFieldGet(this, _Tooltip_show, "f"));
  (_d = this.anchorEl) === null || _d === void 0 ? void 0 : _d.addEventListener('focusout', __classPrivateFieldGet(this, _Tooltip_hide, "f"));
}, _Tooltip_removeEventListener = function _Tooltip_removeEventListener() {
  var _a, _b, _c, _d;
  (_a = this.anchorEl) === null || _a === void 0 ? void 0 : _a.removeEventListener('mouseover', __classPrivateFieldGet(this, _Tooltip_show, "f"));
  (_b = this.anchorEl) === null || _b === void 0 ? void 0 : _b.removeEventListener('mouseout', __classPrivateFieldGet(this, _Tooltip_hide, "f"));
  (_c = this.anchorEl) === null || _c === void 0 ? void 0 : _c.removeEventListener('focusin', __classPrivateFieldGet(this, _Tooltip_show, "f"));
  (_d = this.anchorEl) === null || _d === void 0 ? void 0 : _d.removeEventListener('focusout', __classPrivateFieldGet(this, _Tooltip_hide, "f"));
};
__decorate([attr, __metadata("design:type", String)], Tooltip.prototype, "text", void 0);

let _ = t => t,
  _t;
const getClasses = ({
  open
}) => classNames('control', ['open', Boolean(open)]);
const TooltipTemplate = context => {
  const popupTag = context.tagFor(Popup);
  return html(_t || (_t = _`
<${0} class="${0}" arrow alternate
placement=${0} open=${0} anchor=${0}
  exportparts="vvd-theme-alternate">
  <div class="tooltip" role="tooltip">
    <header part="vvd-theme-alternate" class="tooltip-header">
      <div class="tooltip-text">${0}</div>
    </header>
  </div>
</${0}>`), popupTag, getClasses, x => x.placement, x => x.open, x => x.anchor, x => x.text, popupTag);
};

const tooltipDefinition = Tooltip.compose({
  baseName: 'tooltip',
  template: TooltipTemplate,
  styles: css_248z
});
const tooltipRegistries = [tooltipDefinition(), ...popupRegistries];
const registerTooltip = registerFactory(tooltipRegistries);

export { tooltipRegistries as a, registerTooltip as r, tooltipDefinition as t };
