import { __decorate } from "tslib";
import '@vonage/vvd-core';
import { LitElement, html, property, customElement, } from 'lit-element';
import { classMap } from 'lit-html/directives/class-map.js';
import { unsafeSVG } from 'lit-html/directives/unsafe-svg.js';
import { until } from 'lit-html/directives/until.js';
import { ifDefined } from 'lit-html/directives/if-defined.js';
import { memoizeWith, identity, always } from 'ramda';
import { ariaProperty } from '@material/mwc-base/aria-property.js';
import { style } from './vwc-icon.css.js';
const BASE_URL = 'https://icon.resources.vonage.com';
const ICON_SET_VERSION = '4.0.30';
const PLACEHOLDER_ICON = '<svg viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><style>@keyframes rotation { from { transform: rotate(0deg) } to { transform: rotate(360deg) } } g#circle { transform-origin: center center; animation: 1s rotation 0s linear infinite; } path { fill: currentColor }</style> <g id="circle"> <path d="M7.5 2C3.91014 2 1 4.91014 1 8.5C1 12.0899 3.91014 15 7.5 15C11.0899 15 14 12.0899 14 8.5C14 8.22386 14.2239 8 14.5 8C14.7761 8 15 8.22386 15 8.5C15 12.6421 11.6421 16 7.5 16C3.35786 16 0 12.6421 0 8.5C0 4.35786 3.35786 1 7.5 1C10.3622 1 12.7088 2.78366 13.9478 5.27753C14.0706 5.52484 13.9698 5.82492 13.7225 5.94778C13.4752 6.07065 13.1751 5.96977 13.0522 5.72247C11.9472 3.49834 9.90985 2 7.5 2Z"/><path d="M13.5 0C13.7761 0 14 0.223858 14 0.5V5.5C14 5.77614 13.7761 6 13.5 6H8.5C8.22386 6 8 5.77614 8 5.5C8 5.22386 8.22386 5 8.5 5H13V0.5C13 0.223858 13.2239 0 13.5 0Z"/></g></svg>';
const PLACEHOLDER_DELAY = 500;
const PLACEHOLDER_TIMEOUT = 2000;
const delay = (ms) => new Promise(res => setTimeout(res, ms));
const baseUrlTemplate = (resource, version) => [BASE_URL, `v${version}`, resource].join('/');
const resolveIcon = memoizeWith(identity, (iconId = '') => (iconId.trim()
    ? fetch(baseUrlTemplate([iconId, 'svg'].join('.'), ICON_SET_VERSION))
        .then(res => (res.headers.get('content-type') === 'image/svg+xml' ? res.text() : ''))
    : Promise.resolve('')));
const setSvgAttribute = (name, value) => (svgText = '') => svgText.replace(/<svg[^>]*>/, tagText => tagText.replace(/<svg[^>]+/, attributesText => attributesText.split(' ').concat([name, value].filter(Boolean).join('=')).join(' ')));
let VWCIcon = class VWCIcon extends LitElement {
    constructor() {
        super(...arguments);
        this.ariaLabel = '';
    }
    static get styles() {
        return style;
    }
    getRenderClasses() {
        return {
            [`connotation-${this.connotation}`]: !!this.connotation,
        };
    }
    render() {
        return html `<figure class="icon ${classMap(this.getRenderClasses())}" aria-label="${ifDefined(this.ariaLabel)}">${until(resolveIcon(this.type)
            .then(setSvgAttribute('aria-hidden', 'true'))
            .then(unsafeSVG), delay(PLACEHOLDER_TIMEOUT), delay(PLACEHOLDER_DELAY).then(always(unsafeSVG(PLACEHOLDER_ICON))))}</figure>`;
    }
};
__decorate([
    property({ type: String, reflect: true })
], VWCIcon.prototype, "connotation", void 0);
__decorate([
    property({
        attribute: true,
        type: String,
        reflect: true,
    })
], VWCIcon.prototype, "type", void 0);
__decorate([
    property({
        attribute: true,
        type: Boolean,
        reflect: true,
    })
], VWCIcon.prototype, "inline", void 0);
__decorate([
    property({
        attribute: true,
        type: String,
        reflect: true,
    })
], VWCIcon.prototype, "size", void 0);
__decorate([
    ariaProperty,
    property({
        attribute: 'aria-label',
        type: String,
    })
], VWCIcon.prototype, "ariaLabel", void 0);
VWCIcon = __decorate([
    customElement('vwc-icon')
], VWCIcon);
export { VWCIcon };
//# sourceMappingURL=vwc-icon.js.map