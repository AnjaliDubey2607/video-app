/// <reference types="node" />
import { EventEmitter } from 'events';
import Participant from '../internal/participant';
import CameraSubscriber from '../mp/camera-subscriber';
import ScreenSubscriber from '../mp/screen-subscriber';
declare interface ParticipantWrapper {
    on(event: 'cameraCreated', listener: (cameraSubscriber: CameraSubscriber) => void): this;
    on(event: 'screenCreated', listener: (cameraSubscriber: ScreenSubscriber) => void): this;
    on(event: 'cameraDestroyed', listener: () => void): this;
    on(event: 'screenDestroyed', listener: () => void): this;
}
declare class ParticipantWrapper extends EventEmitter {
    id: string;
    camera?: CameraSubscriber;
    screen?: ScreenSubscriber;
    name?: string;
    connectionData: string;
    isMe: false;
    constructor(participant: Participant);
}
export default ParticipantWrapper;
