import { __decorate } from "tslib";
import '@vonage/vvd-core';
import { customElement, property, html } from 'lit-element';
import { classMap } from 'lit-html/directives/class-map.js';
import { ifDefined } from 'lit-html/directives/if-defined.js';
import { Switch as MWCSwitch } from '@material/mwc-switch';
import { style as vwcSwitchStyle } from './vwc-switch.css.js';
import { styles as mwcSwitchStyles } from '@material/mwc-switch/mwc-switch.css.js';
import { style as styleCoupling } from '@vonage/vvd-style-coupling/mdc-vvd-coupling.css.js';
import { handleAutofocus } from '@vonage/vvd-foundation/general-utils.js';
MWCSwitch.styles = [styleCoupling, mwcSwitchStyles, vwcSwitchStyle];
let VWCSwitch = class VWCSwitch extends MWCSwitch {
    constructor() {
        super(...arguments);
        this.enlarged = false;
    }
    getRenderClasses() {
        return {
            [`connotation-${this.connotation}`]: !!this.connotation,
        };
    }
    render() {
        return html `
      <div class="mdc-switch ${classMap(this.getRenderClasses())}">
        <div class="mdc-switch__track"></div>
        <div class="mdc-switch__thumb-underlay">
          ${this.renderRipple()}
          <div class="mdc-switch__thumb">
            <input
              type="checkbox"
              id="basic-switch"
              class="mdc-switch__native-control"
              role="switch"
              aria-label="${ifDefined(this.ariaLabel)}"
							aria-checked="${this.checked}"
              aria-labelledby="${ifDefined(this.ariaLabelledBy)}"
              @change="${this.changeHandler}"
              @focus="${this.handleRippleFocus}"
              @blur="${this.handleRippleBlur}"
              @mousedown="${this.handleRippleMouseDown}"
              @mouseenter="${this.handleRippleMouseEnter}"
              @mouseleave="${this.handleRippleMouseLeave}"
              @touchstart="${this.handleRippleTouchStart}"
              @touchend="${this.handleRippleDeactivate}"
              @touchcancel="${this.handleRippleDeactivate}">
          </div>
        </div>
      </div>`;
    }
    async firstUpdated() {
        await super.firstUpdated();
        handleAutofocus(this);
    }
    renderRipple() {
        return html ``;
    }
};
__decorate([
    property({ type: String, reflect: true })
], VWCSwitch.prototype, "connotation", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], VWCSwitch.prototype, "enlarged", void 0);
VWCSwitch = __decorate([
    customElement('vwc-switch')
], VWCSwitch);
export { VWCSwitch };
//# sourceMappingURL=vwc-switch.js.map