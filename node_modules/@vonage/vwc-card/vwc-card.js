var _VWCCard_shouldShowFooterSlot;
import { __classPrivateFieldGet, __classPrivateFieldSet, __decorate } from "tslib";
import { customElement, html, LitElement, } from 'lit-element';
import { nothing } from 'lit-html';
import { style } from './vwc-card.css.js';
import { property } from 'lit-element/lib/decorators.js';
import { classMap } from 'lit-html/directives/class-map.js';
import '@vonage/vwc-button';
import '@vonage/vwc-icon';
import '@vonage/vwc-elevation';
const elevationSets = ['0', '2', '4', '8', '12', '16', '24'];
let VWCCard = class VWCCard extends LitElement {
    constructor() {
        super(...arguments);
        this.icon = null;
        this.elevation = '4';
        _VWCCard_shouldShowFooterSlot.set(this, void 0);
    }
    get headerContentExists() {
        var _a;
        return Boolean(this.heading || this.subtitle || this.icon || ((_a = this.IconSlottedItems) === null || _a === void 0 ? void 0 : _a.length));
    }
    get headerClass() {
        return (this.headerContentExists) ? '' : 'no-content';
    }
    render() {
        const footerClassMap = {
            'no-content': !(__classPrivateFieldGet(this, _VWCCard_shouldShowFooterSlot, "f"))
        };
        return html `
			<vwc-elevation .dp=${this.elevation}>
			<!-- there are 2 wrapper due to a safari bug failing 'filter: drop-shadow'
			from rendering shadow on an element with 'overflow: hidden' -->
				<div class="vwc-card">
					<div class="vwc-card-container">
						<div class="vwc-card-media">
							<slot name="media"></slot>
						</div>
						<slot name="main">
							<div class="vwc-card-content">
								<div class="vwc-card-wrapper">
									${this.renderHeader()}
									<slot name="meta"></slot>
								</div>
								<div class="vwc-card-text">
									${this.text ? this.text : nothing}
								</div>
							</div>
						</slot>
						<div class="vwc-card-footer ${classMap(footerClassMap)}">
							<slot name="footer" @slotchange="${this.footerSlotChanged}"></slot>
						</div>
					</div>
				</div>
			</vwc-elevation>
		`;
    }
    renderHeader() {
        return html `
			<header class="vwc-card-header ${this.headerClass}">
				<slot name="graphic" @slotchange="${this.graphicSlotChanged}">
					${this.icon ? this.renderIcon() : ''}
				</slot>
				<div>
					<div class="vwc-card-title">${this.heading}</div>
					<div class="vwc-card-subtitle">${this.subtitle}</div>
				</div>
			</header>`;
    }
    renderIcon() {
        return html `<vwc-icon class="icon" inline type="${this.icon}"></vwc-icon>`;
    }
    graphicSlotChanged() {
        var _a;
        const headerElement = (_a = this.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector('header');
        const slot = headerElement === null || headerElement === void 0 ? void 0 : headerElement.querySelector('slot[name="graphic"]');
        this.IconSlottedItems = slot.assignedNodes();
        if (this.headerContentExists) {
            headerElement === null || headerElement === void 0 ? void 0 : headerElement.classList.remove('no-content');
        }
        else {
            headerElement === null || headerElement === void 0 ? void 0 : headerElement.classList.add('no-content');
        }
    }
    footerSlotChanged() {
        var _a;
        const slot = (_a = this.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector('slot[name="footer"]');
        __classPrivateFieldSet(this, _VWCCard_shouldShowFooterSlot, Boolean(slot.assignedNodes().length), "f");
        this.requestUpdate();
    }
};
_VWCCard_shouldShowFooterSlot = new WeakMap();
VWCCard.styles = style;
__decorate([
    property({
        reflect: true,
        type: String
    })
], VWCCard.prototype, "heading", void 0);
__decorate([
    property({
        reflect: true,
        type: String
    })
], VWCCard.prototype, "subtitle", void 0);
__decorate([
    property({
        reflect: true,
        attribute: 'icon',
        type: String
    })
], VWCCard.prototype, "icon", void 0);
__decorate([
    property({
        reflect: true,
        attribute: 'text',
        type: String
    })
], VWCCard.prototype, "text", void 0);
__decorate([
    property({
        reflect: false,
        attribute: 'elevation',
        type: String
    })
], VWCCard.prototype, "elevation", void 0);
VWCCard = __decorate([
    customElement('vwc-card')
], VWCCard);
export { VWCCard };
//# sourceMappingURL=vwc-card.js.map